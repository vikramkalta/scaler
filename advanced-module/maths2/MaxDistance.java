import java.util.ArrayList;

public class MaxDistance {
    public static void main(String args[]) {
        // int[] arr = {3,4,-1,1};
        // int[] arr = {3, 2, 1};
        int[] arr ={46158044, 9306314, 51157916, 93803496, 20512678, 55668109, 488932, 24018019, 91386538, 68676911, 92581441, 66802896, 10401330, 57053542, 42836847, 24523157, 50084224, 16223673, 18392448, 61771874, 75040277, 30393366, 1248593, 71015899, 20545868, 75781058, 2819173, 37183571, 94307760, 88949450, 9352766, 26990547, 4035684, 57106547, 62393125, 74101466, 87693129, 84620455, 98589753, 8374427, 59030017, 69501866, 47507712, 84139250, 97401195, 32307123, 41600232, 52669409, 61249959, 88263327, 3194185, 10842291, 37741683, 14638221, 61808847, 86673222, 12380549, 39609235, 98726824, 81436765, 48701855, 42166094, 88595721, 11566537, 63715832, 21604701, 83321269, 34496410, 48653819, 77422556, 51748960, 83040347, 12893783, 57429375, 13500426, 49447417, 50826659, 22709813, 33096541, 55283208, 31924546, 54079534, 38900717, 94495657, 6472104, 47947703, 50659890, 33719501, 57117161, 20478224, 77975153, 52822862, 13155282, 6481416, 67356400, 36491447, 4084060, 5884644, 91621319, 43488994, 71554661, 41611278, 28547265, 26692589, 82826028, 72214268, 98604736, 60193708, 95417547, 73177938, 50713342, 6283439, 79043764, 52027740, 17648022, 33730552, 42851318, 13232185, 95479426, 70580777, 24710823, 48306195, 31248704, 24224431, 99173104, 31216940, 66551773, 94516629, 67345352, 62715266, 8776225, 18603704, 7611906        };
        // int[] arr = {46158044, 9306314, 51157916, 93803496, 20512678, 55668109, 488932, 24018019, 91386538, 68676911, 92581441, 66802896, 10401330, 57053542, 42836847, 24523157, 50084224, 16223673, 18392448, 61771874, 75040277, 30393366, 1248593, 71015899, 20545868, 75781058, 2819173, 37183571, 94307760, 88949450, 9352766, 26990547, 4035684, 57106547, 62393125, 74101466, 87693129, 84620455, 98589753, 8374427, 59030017, 69501866, 47507712, 84139250, 97401195, 32307123, 41600232, 52669409, 61249959, 88263327, 3194185, 10842291, 37741683, 14638221, 61808847, 86673222, 12380549, 39609235, 98726824, 81436765, 48701855, 42166094, 88595721, 11566537, 63715832, 21604701, 83321269, 34496410, 48653819, 77422556, 51748960, 83040347, 12893783, 57429375, 13500426, 49447417, 50826659, 22709813, 33096541, 55283208, 31924546, 54079534, 38900717, 94495657, 6472104, 47947703, 50659890, 33719501, 57117161, 20478224, 77975153, 52822862, 13155282, 6481416, 67356400, 36491447, 4084060, 5884644, 91621319, 43488994, 71554661, 41611278, 28547265, 26692589, 82826028, 72214268, 98604736, 60193708, 95417547, 73177938, 50713342, 6283439, 79043764, 52027740, 17648022, 33730552, 42851318, 13232185, 95479426, 70580777, 24710823, 48306195, 31248704, 24224431, 99173104, 31216940, 66551773, 94516629, 67345352, 62715266, 8776225, 18603704, 7611906 };
        // int[] arr = {5,8,10,2,3};
        // int[] arr = {83564666, 2976674, 46591497, 24720696, 16376995, 63209921, 25486800, 49369261, 20465079, 64068560, 7453256, 14180682, 65396173, 45808477, 10172062, 28790225, 82942061, 88180229, 62446590, 77573854, 79342753, 2472968, 74250054, 17223599, 47790265, 24757250, 40512339, 24505824, 30067250, 82972321, 32482714, 76111054, 74399050, 65518880, 94248755, 76948016, 76621901, 46454881, 40376566, 13867770, 76060951, 71404732, 21608002, 26893621, 27370182, 35088766, 64827587, 67610608, 90182899, 66469061, 67277958, 92926221, 58156218, 44648845, 37817595, 46518269, 44972058, 27607545, 99404748, 39262620, 98825772, 89950732, 69937719, 78068362, 78924300, 91679939, 52530444, 71773429, 57678430, 75699274, 5835797, 74160501, 51193131, 47950620, 4572042, 85251576, 49493188, 77502342, 3244395, 51211050, 44229120, 2135351, 47258209, 77312779, 37416880, 59038338, 96069936, 20766025, 35497532, 67316276, 38312269, 38357645, 41600875, 58590177, 99257528, 99136750, 4796996, 84369137, 54237155, 64368327, 94789440, 40718847, 12226041, 80504660, 8177227, 85151842, 36165763, 72764013, 36326808, 80969323, 22947547, 76322099, 7536094, 18346503, 65759149, 45879388, 53114170, 92521723, 15492250, 42479923, 20668783, 64053151, 68778592, 3669297, 73903133, 28973293, 73195487, 64588362, 62227726, 17909010, 70683505, 86982984, 64191987, 71505285, 45949516, 28244755, 33863602, 18256044, 25110337, 23997763, 81020611, 10135495, 925679, 98158797, 73400633, 27282156, 45863518, 49288993, 52471826, 30553639, 76174500, 28828417, 41628693, 80019078, 64260962, 5577578, 50920883, 16864714, 54950300, 9267396, 56454292, 40872286, 33819401, 75369837, 6552946, 26963596, 22368984, 43723768, 39227673, 98188566, 1054037, 28292455, 18763814, 72776850, 47192134, 58393410, 14487674, 4852891, 44100801, 9755253, 37231060, 42836447, 38104756, 77865902, 67635663, 43494238, 76484257, 80555820, 8632145, 3925993, 81317956, 12645616, 23438120, 48241610, 20578077, 75133501, 46214776, 35621790, 15258257, 20145132, 32680983, 94521866, 43456056, 19341117, 29693292, 38935734, 62721977, 31340268, 91841822, 22303667, 96935307, 29160182, 61869130, 33436979, 32438444, 87945655, 43629909, 88918708, 85650550, 4201421, 11958347, 74203607, 37964292, 56174257, 20894491, 33858970, 45292153, 22249182, 77695201, 34240048, 36320401, 64890030, 81514017, 58983774, 88785054, 93832841, 12338671, 46297822, 26489779, 85959340};
        // int[] arr = {417, 929, 845, 462, 675, 175, 73, 867, 14, 201, 777, 407, 80, 882, 785, 563, 209, 261, 776, 362, 730, 74, 649, 465, 353, 801, 503, 154, 998, 286, 520, 692, 68, 805, 835, 210, 819, 341, 564, 215, 984, 643, 381, 793, 726, 213, 866, 706, 97, 538, 308, 797, 883, 59, 328, 743, 694, 607, 729, 821, 32, 672, 130, 13, 76, 724, 384, 444, 884, 192, 917, 75, 551, 96, 418, 840, 235, 433, 290, 954, 549, 950, 21, 711, 781, 132, 296, 44, 439, 164, 401, 505, 923, 136, 317, 548, 787, 224, 23, 185, 6, 350, 822, 457, 489, 133, 31, 830, 386, 671, 999, 255, 222, 944, 952, 637, 523, 494, 916, 95, 734, 908, 90, 541, 470, 941, 876, 264, 880, 761, 535, 738, 128, 772, 39, 553, 656, 603, 868, 292, 117, 966, 259, 619, 836, 818, 493, 592, 380, 500, 599, 839, 268, 67, 591, 126, 773, 635, 800, 842, 536, 668, 896, 260, 664, 506, 280, 435, 618, 398, 533, 647, 373, 713, 745, 478, 129, 844, 640, 886, 972, 62, 636, 79, 600, 263, 52, 719, 665, 376, 351, 623, 276, 66, 316, 813, 663, 831, 160, 237, 567, 928, 543, 508, 638, 487, 234, 997, 307, 480, 620, 890, 216, 147, 271, 989, 872, 994, 488, 291, 331, 8, 769, 481, 924, 166, 89, 824, -4, 590, 416, 17, 814, 728, 18, 673, 662, 410, 727, 667, 631, 660, 625, 683, 33, 436, 930, 91, 141, 948, 138, 113, 253, 56, 432, 744, 302, 211, 262, 968, 945, 396, 240, 594, 684, 958, 343, 879, 155, 395, 288, 550, 482, 557, 826, 598, 795, 914, 892, 690, 964, 981, 150, 179, 515, 205, 265, 823, 799, 190, 236, 24, 498, 229, 420, 753, 936, 191, 366, 935, 434, 311, 920, 167, 817, 220, 219, 741, -2, 674, 330, 909, 162, 443, 412, 974, 294, 864, 971, 760, 225, 681, 689, 608, 931, 427, 687, 466, 894, 303, 390, 242, 339, 252, 20, 218, 499, 232, 184, 490, 4, 957, 597, 477, 354, 677, 691, 25, 580, 897, 542, 186, 359, 346, 409, 655, 979, 853, 411, 344, 358, 559, 765, 383, 484, 181, 82, 514, 582, 593, 77, 228, 921, 348, 453, 274, 449, 106, 657, 783, 782, 811, 333, 305, 784, 581, 746, 858, 249, 479, 652, 270, 429, 614, 903, 102, 378, 575, 119, 196, 12, 990, 356, 277, 169, 70, 518, 282, 676, 137, 622, 616, 357, 913, 161, 3, 589, 327};
        ArrayList<Integer> A = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) A.add(arr[i]);
        System.out.println(solve(A));
    }

    public static int solve(ArrayList<Integer> A) {
        int len = A.size();
        if (len==0||len==1) return 0;

        // boolean isRevSorted = true;
        // int prev = A.get(0);
        // for(int i = 1; i < len; i++) {
        //     int curr = A.get(i);
        //     if (curr >= prev) {
        //         isRevSorted = false;
        //         break;
        //     }
        // }
        // if (isRevSorted) {
        //     return 0;
        // }

        ArrayList<Integer> aux = new ArrayList<>();
        aux.add(1);
        // int 
        // for (int i = 0; i < len; i++) {
        //     int curr = A.get(i);
        //     if (min > curr) {
        //         min = curr;
        //         minIndex = i;
        //     }
        //     minLeft.add(minIndex);
        // }

        int ans = Integer.MIN_VALUE;
        return ans;
    }

    public static int solve3(ArrayList<Integer> a) {
        int len = a.size();
        if (len==0||len==1) return 0;
        ArrayList<Integer> indices = new ArrayList<>();
        ArrayList<Integer> A = new ArrayList<>();
        for (int i = 0; i < len; i++) {
            indices.add(i);
            A.add(a.get(i));
        }
        mergeSort(A, indices, 0, len-1);

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        ArrayList<Integer> minLeft = new ArrayList<>();
        ArrayList<Integer> maxRight = new ArrayList<>();
        for (int i = 0; i < len; i++) {
            int curr = indices.get(i);
            if (min > curr) {
                min = curr;
            }
            minLeft.add(min);
        }
        for (int i = len - 1; i >= 0; i--) {
            int curr = indices.get(i);
            if (max < curr) {
                max = curr;
            }
            maxRight.add(max);
        }
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i < len; i++) {
            int currMin = minLeft.get(i);
            int currMax = maxRight.get(len - 1 - i);
            int diff = currMax - currMin;
            if (ans < diff) {
                ans = diff;
            }
        }
        return ans;
    }

    public static int solve2(ArrayList<Integer> a) {
        int len = a.size();
        if (len==0||len==1) return 0;
        ArrayList<Integer> indices = new ArrayList<>();
        ArrayList<Integer> A = new ArrayList<>();
        for (int i = 0; i < len; i++) {
            indices.add(i);
            A.add(a.get(i));
        }
        mergeSort(A, indices, 0, len-1);
        int max = Integer.MIN_VALUE;
        int prev = indices.get(0);
        int startIndex = 0;
        for (int i = 1; i < len; i++) {
            int curr = indices.get(i);
            if (curr < prev) {
                int diff = indices.get(i-1) - indices.get(startIndex);
                if (max < diff) {
                    max = diff;
                }
                startIndex = i;
            }
            if (i == len -1 && curr > prev){
                int diff = curr - indices.get(startIndex);
                if (max < diff) {
                    max = diff;
                }
            }
            prev = curr;
        }
        return max;
    }

    private static void mergeSort(ArrayList<Integer> arr, ArrayList<Integer> indices, int l, int r) {
        if (l >= r) {
            return;
        }
        int m = (l+r)/2;
        mergeSort(arr, indices, l, m);
        mergeSort(arr, indices, m+1, r);
        merge(arr, indices, l, m, r);
    }

    private static void merge(ArrayList<Integer> arr, ArrayList<Integer> indices, int l, int m, int r) {
        ArrayList<Integer> arr1 = new ArrayList<>();
        ArrayList<Integer> arr2 = new ArrayList<>();
        ArrayList<Integer> indices1 = new ArrayList<>();
        ArrayList<Integer> indices2 = new ArrayList<>();
        for (int i = l; i <= m; i++) {
            arr1.add(arr.get(i));
            indices1.add(indices.get(i));
        }
        for (int i = m+1; i <= r; i++) {
            arr2.add(arr.get(i));
            indices2.add(indices.get(i));
        }
        int len1 = arr1.size();
        int len2 = arr2.size();
        int i = 0, j = 0, k = l;
        while(i < len1 && j < len2) {
            int curr1 = arr1.get(i);
            int curr2=arr2.get(j);
            if (curr1 <= curr2) {
                arr.set(k, curr1);
                indices.set(k, indices1.get(i));
                i++;
            }else {
                arr.set(k, curr2);
                indices.set(k, indices2.get(j));
                j++;
            }
            k++;
        }
        while(i < len1) {
            arr.set(k, arr1.get(i));
            indices.set(k, indices1.get(i));
            i++;
            k++;
        }
        while(j < len2) {
            arr.set(k, arr2.get(j));
            indices.set(k, indices2.get(j));
            j++;
            k++;
        }
    }

    public static int solve1(ArrayList<Integer> A) {
        int len = A.size();
        if (len==0||len==1) return 0;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < len; i++) {
            int currI = A.get(i);
            for (int j = i+1; j < len; j++) {
                int currJ = A.get(j);
                if (currI <= currJ) {
                    int diff = j - i;
                    if (max < diff) {
                        max = diff;
                    }
                }
            }
        }
        return max == Integer.MIN_VALUE ? 0 : max;
    }
}
