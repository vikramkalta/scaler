import java.util.ArrayList;
import java.util.List;

public class DiskSpaceAnalysis {
    public static void main(String args[]) {
        // int[] a = {8,2,4,6};
        // int[] a = {1,2,3,1,2};
        int[] a = {236406646, 236478672, 726947424, 147123443, 39603650, 923226970, 588450983, 553282344, 765283299, 382434672, 554560133, 418248964, 851012114, 924386348, 924386354, 924386353, 757652139, 163636256, 863789338, 924386358, 924386349, 737839400, 924386351, 393986977, 250799009, 924386359, 357250303, 68522610, 512545615, 924386367, 186742952, 393471038, 312685357, 924386365, 47752169, 924386369, 924386371, 924386379, 431585724, 36211467, 906696634, 924386379, 924386375, 667391699, 651956533, 924386382, 924386386, 899642556, 924386393, 924386402, 25200130, 927936226, 927936232, 133774987, 927936238, 927936246, 116950065, 927936240, 927936239, 927936254, 927936264, 927936254, 598116735, 927936261, 24492680, 927936265, 927936263, 927936260, 927936263, 121046497, 927936261, 927936256, 927936260, 239632172, 927936259, 927936273, 927936268, 927936278, 927936270, 927936282, 756335868, 191331474, 927936286, 927936292, 927936292, 650303647, 456676729, 389827125, 927936288, 31247649, 927936292, 180225798, 95116536, 940602220, 808084301, 940602211, 940602223, 940602215, 441531876, 839062956, 998355440, 998355442, 998355444, 998355448, 998355444, 910897640, 666479504, 815173111, 858942521, 17534713, 862484293, 514750647, 998355442, 998355443, 101599579, 275226586, 998355453, 322179863, 998355462, 998355462, 998355455, 998355465, 247652988, 514667515, 509316230, 998355464, 998355461, 998355465, 314434873, 502718234, 960030381, 998355465, 583622736, 998355465, 364018999, 915001057, 998355462, 998355462, 998355462, 998355454, 998355467, 963176956, 892564051, 998355468, 667807064, 998355470, 800743016, 929135685, 677170770, 998355466, 927914810, 378818185, 37181476, 998355480, 343071984, 998355471, 998355488, 958121370, 998355498, 998355499, 584079596, 998355508, 232374523, 998355509, 824138431, 998355509, 164116227, 998355517, 998355523, 998355514, 378308886, 414651600, 693965822, 998355526, 998355524, 998355526, 424427424, 998355521, 998355532, 998355527, 799045132, 998355531, 998355527, 31888410, 555102207, 931115928, 211985666, 142164085, 998355533, 691129884, 832587371, 998355534, 998355527, 137679750, 549070894, 998355540, 998355542, 940922386, 998355543, 399206576, 998355534, 965005154, 998355542, 998355547, 710621626, 998355551, 998355543, 998355553, 998355550, 998355561, 998355556, 457120800, 998355561, 581148993, 894520129, 998355556, 998355565, 998355572, 998355577, 998355581, 998355572, 667118034, 893744975, 64589791, 998355587, 998355592, 998355592, 313225902, 417452506, 871111733, 998355602, 330922329, 998355607, 126235960, 998355615, 234092045, 998355624, 998355619, 933419860, 483136808, 895539999, 998355633, 998355637, 684651049, 998355642, 998355647, 676593623, 998355648, 998355658, 907055374, 998355667, 995933965, 998355668, 998355678, 939441627, 998355675, 998355681, 998355674, 998355688, 998355692, 998355702, 524948131, 998355693, 998355706, 786062916, 998355699, 519067276, 998355716, 998355709, 998355726, 998355726, 998355732, 998355737, 763997564, 152065830, 998355731, 998355740, 453161922, 395703828, 294186837, 998355744, 998355750, 998355746, 936268058, 998355757, 471367521, 998355762, 998355764, 277262417, 693905155, 252992808, 998355764, 998355759, 998355774, 998355764, 473267047, 394867655, 998355770, 998355775, 998355781, 398458435, 998355789, 998355787, 998355790, 700380203, 998355790, 998355798, 998355790, 998355790, 461963847, 798317017, 998355800, 861922661, 170946359, 396198557, 998355808, 956721000, 701595188, 641519718, 998355802, 998355809, 998355818, 998355821, 998355814, 776229198, 998355827, 998355817, 998355825, 172095480, 998355834, 998355839, 998355849, 998355840, 998355852, 31291734, 12325146, 15862157, 152055988, 998355861, 998355861, 381776376, 998355868, 998355866, 998355870, 118998472, 998355872, 277439722, 336735367, 998355872, 998355873, 998355877, 352979783, 947027906, 998355868, 558370550, 998355876, 998355883, 998355885, 677788363, 870062870, 992723700, 929394682, 998355876, 998355888, 998355887, 998355887, 998355881, 790756818, 559925494, 850572581, 257112855, 998355881, 619866279, 998355893, 998355897, 41915158, 998355906, 201170019, 77444070, 998355900, 998355915, 998355918, 369501428, 194809619, 998355921, 998355928, 50291113, 998355926, 998355921, 222101374, 998355918, 761903211, 1845742, 998355935, 998355935, 998355940, 998355942, 998355942, 391858584, 998355947, 998355939, 998355948, 837146577, 998355943, 430281809, 440210249, 596440738, 313160363, 998355947, 998355949, 998355939, 998355943, 998355951, 998355951, 330543645, 998355961, 998355957, 998355963, 998355968, 635323051, 998355972, 998355979, 846100281, 678649943, 998355979, 998355980, 574681687, 998355979, 854154869, 998355975, 773947126, 998355978, 47053679, 998355973, 529286486, 998355975, 223367802, 502892107, 998355990, 647254271, 748832401, 998355982, 998355981, 924643817, 383290574, 998355997, 667287527, 998355987, 919752834, 998355999, 998356002, 998356003, 998356005, 998356013, 148610877, 179668897, 732276717, 558185555, 998356013, 688136409, 998356022, 219465189, 998356031, 998356034, 831492962, 998356028, 652142470, 149953752, 998356036, 917817911, 998356042, 484626690, 663214802, 216078956, 998356036, 998356035, 90390424, 998356039, 676065118, 998356034, 998356050, 481494994, 380131197, 339426556, 464362894, 998356042, 998356058, 998356068, 998356069, 998356076, 998356081, 644588953, 998356085, 998356085, 39637259, 998356076, 998356078, 998356085, 258256459, 911244608, 998356080, 998356080, 2861813, 998356080, 998356085, 814877744, 998356082, 998356081, 998356082, 998356083, 998356079, 998356085, 129203690, 339051739, 998356089, 10829620, 998356092, 998356092, 262728583, 998356099, 388768216, 811435848, 998356099, 998356103, 998356109, 998356116, 559423090, 998356126, 998356135, 963556154, 998356136, 998356141, 998356141, 998356136, 998356145, 998356154, 998356160, 998356155, 200329072, 647324801, 998356160, 998356157, 894806600, 523967452, 682312008, 998356169, 998356172, 998356163, 998356182, 998356188, 998356192, 998356197, 998356197, 998356188, 998356194, 725149744, 998356201, 235407045, 744102582, 998356195, 998356209, 998356212, 780256128, 998356217, 161553889, 37888335, 998356225, 998356229, 998356229, 998356219, 981249375, 998356225, 199807252, 998356230, 487915551, 998356225, 534122423, 342025324, 998356222, 956369982, 998356225, 998356232, 998356242, 998356245, 998356250, 998356250, 756962319, 894809144, 220207177, 154140320, 998356250, 998356251, 896333749, 670958595, 998356260, 715246696, 998356264, 998356271, 998356268, 998356273, 959584199, 328304915, 998356282, 998356292, 998356293, 998356283, 998356301, 682760950, 998356311, 998356319, 998356324, 589296132, 998356329, 998356336, 819577720, 998356328, 307041379, 998356342, 142732732, 395389053, 204939203, 173333659, 223253034, 998356350, 998356351, 128339767, 998356355, 715473258, 998356357, 998356361, 998356362, 461247480, 998356356, 998356363, 865855149, 997691717, 299827857, 688325254, 998356363, 998356370, 998356376, 615636090, 998356377, 998356387, 534185935, 998356394, 998356397, 998356394, 998356405, 975315147, 998356404, 998356408, 998356413, 998356416, 22692422, 11837616, 998356416, 677331279, 594417930, 998356415, 998356418, 959275650, 177836136, 998356418, 998356423, 926426853, 998356417, 998356430, 167339951, 111797663, 218341471, 219451852, 998356424, 998356432, 241821415, 824250012, 97761693, 548828263, 998356441, 342188732, 104801681, 113433352, 998356446, 998356442, 542448959, 998356446, 998356452, 998356444, 998356444, 998356455, 998356454, 998356448, 998356446, 998356459, 646296107, 998356452, 732213953, 998356466, 998356465, 893012952, 998356469, 998356474, 998356470, 998356481, 287518352, 998356490, 461948537, 350776836, 68925999, 998356494, 998356492, 998356499, 669161009, 731033439, 998356495, 998356509, 176493309, 877354877, 329375645, 998356505, 998356502, 998356507, 998356506, 998356504, 998356517, 627505569, 886970409, 937860275, 263136464, 998356517, 849202502, 249712340, 407321739, 998356522, 998356526, 998356519, 998356528, 762960654, 979322519, 998356524, 998356530, 64002419, 998356525, 323610034, 998356522, 998356522, 685124945, 998356521, 998356538, 44602573, 998356535, 998356530, 998356548, 998356543, 998356556, 453142599, 224469212, 449845329, 998356552, 216973091, 663150075, 998356564, 998356572, 998356581, 998356588, 352728240, 998356583, 998356596, 998356602, 998356602, 998356595, 998356610, 742618205, 776192963, 384477453, 998356615, 998356614, 998356616, 998356625, 715016822, 39119395, 822178573, 369495996, 275201160, 938784388, 499528887, 998356623, 917786174, 727427689, 149010792, 493549247, 998356622, 998356631, 998356639, 54937079, 424318688, 41978146, 483698909, 998356641, 132633237, 100169948, 998356637, 998356639, 652973096, 998356640, 998356649, 345732226, 998356647, 771783453, 131380828, 474140121, 998356645, 926299024, 998356641, 207289399, 239530873, 237265927, 164844442, 71070786, 795563277, 998356648, 998356651, 998356659, 998356663, 998356663, 998356665, 998356667, 597381139, 332146487, 998356660, 969003346, 998356676, 998356671, 219463908, 998356667, 998356679, 998356676, 255174270, 911018076, 998356677, 998356675, 883203058, 998356688, 998356691, 750855854, 998356700, 333855244, 738641006, 83597458, 822388892, 998356710, 791487817, 998356709, 946965468, 998356706, 998356710, 453734560, 998356718, 998356718, 998356724, 998356731, 998356725, 971008937, 998356733, 998356733, 882135611, 908969889, 998356739, 998356743, 877049737,
             998356752, 998356762, 552732858, 998356772, 998356772, 998356770, 487884080, 998356764, 998356772, 484544654, 998356763, 998356776, 281218014, 998356785, 856529211, 998356789, 887856216, 998356794, 926487740, 791354959, 998356794, 123690655, 998356802, 164557482, 998356807, 998356807, 997098248, 835842958, 998356800, 
             998356816, 807014831, 609466985, 659525839, 998356815, 998356820, 959657099, 
             998356830, 878561698, 998356821, 512942718, 363874201, 217332632, 998356824, 497048341, 272807974, 
             998356830, 998356833, 998356838, 532698188, 998356844, 998356851, 544278583, 998356849, 998356844, 
             861711266, 998356853, 149599413, 998356856, 453411881, 405529920, 614821836, 998356854, 388071868, 
             998356864, 998356866, 998356856, 953319012, 267067984, 151918963, 531773120, 998356870, 
             998356867, 998356870, 998356879, 749977851, 139739786, 998356886, 998356877, 291223230, 
             998356887, 904326421, 998356893, 998356893, 858109040, 998356899, 16634110, 200260457, 998356906,
              570039273, 358753359, 998356912, 998356908, 998356907, 352468359, 998356916, 998356910, 783772480, 900429865, 9530790, 998356924, 998356924, 998356920, 275498902, 816121580, 998356926, 998356933, 87821722, 998356930, 771492631, 998356923, 998356942, 998356952, 998356943, 998356953, 998356956, 329819568, 57477925, 998356960, 998356968, 553661273, 998356964, 998356959, 998356965, 736788170, 998356968, 998356969, 204107545, 998356972, 475523122, 998356970};
        int size = a.length;
        System.out.println("A: " + size);
        ArrayList<Integer> A = new ArrayList<>();
        for (int i = 0; i < a.length; i++) {
            A.add(a[i]);
        }
        // System.out.println(segment(2, A));
        // System.out.println(segment(1, A));
        System.out.println(segment(14, A));
    }
    
    public static int segment(int x, List<Integer> space) {
        int len = space.size();
        int max = Integer.MIN_VALUE;
        int tracker = 0;
        Queue queue = new Queue(x);
        int min = Integer.MAX_VALUE;
        ArrayList<Integer> minArr = new ArrayList<>();
        for (int i = 0; i < len; i++) {
            int curr = space.get(i);
            tracker++;
            // queue.enqueue(curr);
            if (tracker <= x) {
                if (min > curr) {
                    min = curr;
                }
                queue.enqueue(curr);
                if (tracker == x) {
                    minArr.add(min);
                }
            } else {
                tracker--;
                int first = queue.dequeue();
                queue.enqueue(curr);
                if (first > min && curr > min) {
                // if (min == first) {
                //     min = queue.getMin();
                //     minArr.add(min);
                // } else if (min == curr) {
                //     minArr.add(min);
                // } else {
                //     min = queue.getMin();
                //     minArr.add(min);
                // }
                // if (curr > min) {
                    minArr.add(min);
                } else {
                    min = queue.getMin();
                    minArr.add(min);
                }
            }
        }
        int minArrLen = minArr.size();
        for (int i = 0; i < minArrLen; i++) {
            int curr = minArr.get(i);
            if (max < curr) {
                max = curr;
            }
        }
        return max;
    }

    public static class Queue {
        int length = 0;
        int size = 0;
        int rear = -1;
        int front = 0;
        int[] queue;
        Queue(int n) {
            length = n;
            queue = new int[n];
        }
        public void enqueue(int n) {
            if (isFull()) {
                System.exit(1);
                System.out.println("Illegal op[E]");
            }
            rear = (rear + 1) % length;
            queue[rear] = n;
            size++;
        }
        public int dequeue() {
            if (isEmpty()) {
                System.exit(1);
                System.out.println("Illegal op[D]");
            }
            int temp = queue[front];
            front = (front + 1) % length;
            size--;
            return temp;
        }
        public boolean isEmpty() {
            return size == 0;
        }
        public boolean isFull() {
            return size == length;
        }
        public int getMin() {
            int abs = Math.abs(rear - front);
            int i = 0;
            int currIndex = front;
            int min = Integer.MAX_VALUE;
            while(i < length) {
                int currElement = queue[currIndex];
                if (min > currElement) {
                    min = currElement;
                }
                currIndex = (currIndex + 1) % length;
                i++;
            }
            return min;
        }
    }
}